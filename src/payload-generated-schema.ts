/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  uuid,
  varchar,
  timestamp,
  numeric,
  serial,
  integer,
  jsonb,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum_users_role = pgEnum("enum_users_role", ["admin", "user"]);
export const enum_session_messages_role = pgEnum("enum_session_messages_role", [
  "system",
  "user",
  "assistant",
]);

export const users = pgTable(
  "users",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    username: varchar("username"),
    avatar: uuid("avatar_id").references(() => media.id, {
      onDelete: "set null",
    }),
    role: enum_users_role("role"),
    certificate_authority_data: varchar("certificate_authority_data"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_avatar_idx: index("users_avatar_idx").on(columns.avatar),
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const users_rels = pgTable(
  "users_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    user_projectsID: uuid("user_projects_id"),
  },
  (columns) => ({
    order: index("users_rels_order_idx").on(columns.order),
    parentIdx: index("users_rels_parent_idx").on(columns.parent),
    pathIdx: index("users_rels_path_idx").on(columns.path),
    users_rels_user_projects_id_idx: index(
      "users_rels_user_projects_id_idx",
    ).on(columns.user_projectsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [users.id],
      name: "users_rels_parent_fk",
    }).onDelete("cascade"),
    user_projectsIdFk: foreignKey({
      columns: [columns["user_projectsID"]],
      foreignColumns: [user_projects.id],
      name: "users_rels_user_projects_fk",
    }).onDelete("cascade"),
  }),
);

export const media = pgTable(
  "media",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    alt: varchar("alt").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const user_projects_ssh_credentials = pgTable(
  "user_projects_ssh_credentials",
  {
    _order: integer("_order").notNull(),
    _parentID: uuid("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    address: varchar("address"),
    port: numeric("port"),
    username: varchar("username"),
    password: varchar("password"),
  },
  (columns) => ({
    _orderIdx: index("user_projects_ssh_credentials_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("user_projects_ssh_credentials_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [user_projects.id],
      name: "user_projects_ssh_credentials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const user_projects = pgTable(
  "user_projects",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name").notNull(),
    public_address: varchar("public_address"),
    internal_vector_store_address: varchar("internal_vector_store_address"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    user_projects_updated_at_idx: index("user_projects_updated_at_idx").on(
      columns.updatedAt,
    ),
    user_projects_created_at_idx: index("user_projects_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const user_projects_rels = pgTable(
  "user_projects_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    project_sessionsID: uuid("project_sessions_id"),
  },
  (columns) => ({
    order: index("user_projects_rels_order_idx").on(columns.order),
    parentIdx: index("user_projects_rels_parent_idx").on(columns.parent),
    pathIdx: index("user_projects_rels_path_idx").on(columns.path),
    user_projects_rels_project_sessions_id_idx: index(
      "user_projects_rels_project_sessions_id_idx",
    ).on(columns.project_sessionsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [user_projects.id],
      name: "user_projects_rels_parent_fk",
    }).onDelete("cascade"),
    project_sessionsIdFk: foreignKey({
      columns: [columns["project_sessionsID"]],
      foreignColumns: [project_sessions.id],
      name: "user_projects_rels_project_sessions_fk",
    }).onDelete("cascade"),
  }),
);

export const project_sessions = pgTable(
  "project_sessions",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    project_sessions_updated_at_idx: index(
      "project_sessions_updated_at_idx",
    ).on(columns.updatedAt),
    project_sessions_created_at_idx: index(
      "project_sessions_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const project_sessions_rels = pgTable(
  "project_sessions_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    session_messagesID: varchar("session_messages_id"),
  },
  (columns) => ({
    order: index("project_sessions_rels_order_idx").on(columns.order),
    parentIdx: index("project_sessions_rels_parent_idx").on(columns.parent),
    pathIdx: index("project_sessions_rels_path_idx").on(columns.path),
    project_sessions_rels_session_messages_id_idx: index(
      "project_sessions_rels_session_messages_id_idx",
    ).on(columns.session_messagesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [project_sessions.id],
      name: "project_sessions_rels_parent_fk",
    }).onDelete("cascade"),
    session_messagesIdFk: foreignKey({
      columns: [columns["session_messagesID"]],
      foreignColumns: [session_messages.id],
      name: "project_sessions_rels_session_messages_fk",
    }).onDelete("cascade"),
  }),
);

export const session_messages = pgTable(
  "session_messages",
  {
    id: varchar("id").primaryKey(),
    role: enum_session_messages_role("role").notNull(),
    parts: jsonb("parts").notNull(),
    metadata: jsonb("metadata"),
    project_session: uuid("project_session_id")
      .notNull()
      .references(() => project_sessions.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    session_messages_project_session_idx: index(
      "session_messages_project_session_idx",
    ).on(columns.project_session),
    session_messages_updated_at_idx: index(
      "session_messages_updated_at_idx",
    ).on(columns.updatedAt),
    session_messages_created_at_idx: index(
      "session_messages_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: uuid("users_id"),
    mediaID: uuid("media_id"),
    user_projectsID: uuid("user_projects_id"),
    project_sessionsID: uuid("project_sessions_id"),
    session_messagesID: varchar("session_messages_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_user_projects_id_idx: index(
      "payload_locked_documents_rels_user_projects_id_idx",
    ).on(columns.user_projectsID),
    payload_locked_documents_rels_project_sessions_id_idx: index(
      "payload_locked_documents_rels_project_sessions_id_idx",
    ).on(columns.project_sessionsID),
    payload_locked_documents_rels_session_messages_id_idx: index(
      "payload_locked_documents_rels_session_messages_id_idx",
    ).on(columns.session_messagesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    user_projectsIdFk: foreignKey({
      columns: [columns["user_projectsID"]],
      foreignColumns: [user_projects.id],
      name: "payload_locked_documents_rels_user_projects_fk",
    }).onDelete("cascade"),
    project_sessionsIdFk: foreignKey({
      columns: [columns["project_sessionsID"]],
      foreignColumns: [project_sessions.id],
      name: "payload_locked_documents_rels_project_sessions_fk",
    }).onDelete("cascade"),
    session_messagesIdFk: foreignKey({
      columns: [columns["session_messagesID"]],
      foreignColumns: [session_messages.id],
      name: "payload_locked_documents_rels_session_messages_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: uuid("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: uuid("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users_rels = relations(users_rels, ({ one }) => ({
  parent: one(users, {
    fields: [users_rels.parent],
    references: [users.id],
    relationName: "_rels",
  }),
  user_projectsID: one(user_projects, {
    fields: [users_rels.user_projectsID],
    references: [user_projects.id],
    relationName: "user_projects",
  }),
}));
export const relations_users = relations(users, ({ one, many }) => ({
  avatar: one(media, {
    fields: [users.avatar],
    references: [media.id],
    relationName: "avatar",
  }),
  _rels: many(users_rels, {
    relationName: "_rels",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_user_projects_ssh_credentials = relations(
  user_projects_ssh_credentials,
  ({ one }) => ({
    _parentID: one(user_projects, {
      fields: [user_projects_ssh_credentials._parentID],
      references: [user_projects.id],
      relationName: "ssh_credentials",
    }),
  }),
);
export const relations_user_projects_rels = relations(
  user_projects_rels,
  ({ one }) => ({
    parent: one(user_projects, {
      fields: [user_projects_rels.parent],
      references: [user_projects.id],
      relationName: "_rels",
    }),
    project_sessionsID: one(project_sessions, {
      fields: [user_projects_rels.project_sessionsID],
      references: [project_sessions.id],
      relationName: "project_sessions",
    }),
  }),
);
export const relations_user_projects = relations(user_projects, ({ many }) => ({
  ssh_credentials: many(user_projects_ssh_credentials, {
    relationName: "ssh_credentials",
  }),
  _rels: many(user_projects_rels, {
    relationName: "_rels",
  }),
}));
export const relations_project_sessions_rels = relations(
  project_sessions_rels,
  ({ one }) => ({
    parent: one(project_sessions, {
      fields: [project_sessions_rels.parent],
      references: [project_sessions.id],
      relationName: "_rels",
    }),
    session_messagesID: one(session_messages, {
      fields: [project_sessions_rels.session_messagesID],
      references: [session_messages.id],
      relationName: "session_messages",
    }),
  }),
);
export const relations_project_sessions = relations(
  project_sessions,
  ({ many }) => ({
    _rels: many(project_sessions_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_session_messages = relations(
  session_messages,
  ({ one }) => ({
    project_session: one(project_sessions, {
      fields: [session_messages.project_session],
      references: [project_sessions.id],
      relationName: "project_session",
    }),
  }),
);
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    user_projectsID: one(user_projects, {
      fields: [payload_locked_documents_rels.user_projectsID],
      references: [user_projects.id],
      relationName: "user_projects",
    }),
    project_sessionsID: one(project_sessions, {
      fields: [payload_locked_documents_rels.project_sessionsID],
      references: [project_sessions.id],
      relationName: "project_sessions",
    }),
    session_messagesID: one(session_messages, {
      fields: [payload_locked_documents_rels.session_messagesID],
      references: [session_messages.id],
      relationName: "session_messages",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  enum_users_role: typeof enum_users_role;
  enum_session_messages_role: typeof enum_session_messages_role;
  users: typeof users;
  users_rels: typeof users_rels;
  media: typeof media;
  user_projects_ssh_credentials: typeof user_projects_ssh_credentials;
  user_projects: typeof user_projects;
  user_projects_rels: typeof user_projects_rels;
  project_sessions: typeof project_sessions;
  project_sessions_rels: typeof project_sessions_rels;
  session_messages: typeof session_messages;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users_rels: typeof relations_users_rels;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_user_projects_ssh_credentials: typeof relations_user_projects_ssh_credentials;
  relations_user_projects_rels: typeof relations_user_projects_rels;
  relations_user_projects: typeof relations_user_projects;
  relations_project_sessions_rels: typeof relations_project_sessions_rels;
  relations_project_sessions: typeof relations_project_sessions;
  relations_session_messages: typeof relations_session_messages;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
